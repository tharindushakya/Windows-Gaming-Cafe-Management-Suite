@page "/stations"
@using GamingCafe.Core.Models
@using GamingCafe.Data
@inject GamingCafeContext DbContext
@inject IJSRuntime JSRuntime

<PageTitle>Stations Management</PageTitle>

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h3 mb-0 text-gray-800">Gaming Stations</h1>
        <button class="btn btn-primary" @onclick="ShowAddStationModal">
            <i class="fas fa-plus"></i> Add Station
        </button>
    </div>

    <div class="row">
        @if (stations == null)
        {
            <div class="col-12">
                <div class="text-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="sr-only">Loading...</span>
                    </div>
                </div>
            </div>
        }
        else
        {
            @foreach (var station in stations)
            {
                <div class="col-xl-3 col-md-6 mb-4">
                    <div class="card border-left-@(station.IsAvailable ? "success" : "danger") shadow h-100 py-2">
                        <div class="card-body">
                            <div class="row no-gutters align-items-center">
                                <div class="col mr-2">
                                    <div class="text-xs font-weight-bold text-@(station.IsAvailable ? "success" : "danger") text-uppercase mb-1">
                                        @station.StationName
                                    </div>
                                    <div class="h5 mb-0 font-weight-bold text-gray-800">
                                        @station.StationType
                                    </div>
                                    <div class="text-xs text-gray-600">
                                        $@station.HourlyRate/hour
                                    </div>
                                    <div class="text-xs text-gray-600 mt-1">
                                        @(station.IsAvailable ? "Available" : "In Use")
                                    </div>
                                    @if (!station.IsAvailable && station.CurrentUserId.HasValue)
                                    {
                                        <div class="text-xs text-warning mt-1">
                                            User ID: @station.CurrentUserId
                                        </div>
                                    }
                                </div>
                                <div class="col-auto">
                                    <i class="fas fa-desktop fa-2x text-gray-300"></i>
                                </div>
                            </div>
                            <div class="mt-3">
                                <button class="btn btn-sm btn-outline-primary me-2" @onclick="() => EditStation(station)">
                                    <i class="fas fa-edit"></i> Edit
                                </button>
                                <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteStation(station.StationId)">
                                    <i class="fas fa-trash"></i> Delete
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>

    <!-- Station Details Table -->
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">Station Details</h6>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-bordered" width="100%" cellspacing="0">
                    <thead>
                        <tr>
                            <th>Station Name</th>
                            <th>Type</th>
                            <th>Status</th>
                            <th>Hourly Rate</th>
                            <th>Current User</th>
                            <th>Session Start</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (stations != null)
                        {
                            @foreach (var station in stations)
                            {
                                <tr>
                                    <td>@station.StationName</td>
                                    <td>@station.StationType</td>
                                    <td>
                                        <span class="badge badge-@(station.IsAvailable ? "success" : "danger")">
                                            @(station.IsAvailable ? "Available" : "In Use")
                                        </span>
                                    </td>
                                    <td>$@station.HourlyRate</td>
                                    <td>@(station.CurrentUserId?.ToString() ?? "N/A")</td>
                                    <td>@(station.SessionStartTime?.ToString("HH:mm") ?? "N/A")</td>
                                    <td>
                                        <button class="btn btn-sm btn-primary me-1" @onclick="() => EditStation(station)">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteStation(station.StationId)">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@code {
    private List<GameStation>? stations;

    protected override void OnInitialized()
    {
        LoadStations();
    }

    private void LoadStations()
    {
        stations = DbContext.GameStations.OrderBy(s => s.StationName).ToList();
    }

    private async Task ShowAddStationModal()
    {
        // TODO: Implement add station modal
        await JSRuntime.InvokeVoidAsync("alert", "Add Station functionality coming soon!");
    }

    private async Task EditStation(GameStation station)
    {
        // TODO: Implement edit station modal
        await JSRuntime.InvokeVoidAsync("alert", $"Edit Station {station.StationName} functionality coming soon!");
    }

    private async Task DeleteStation(int stationId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this station?");
        if (confirmed)
        {
            var station = DbContext.GameStations.Find(stationId);
            if (station != null)
            {
                DbContext.GameStations.Remove(station);
                await DbContext.SaveChangesAsync();
                LoadStations();
                StateHasChanged();
            }
        }
    }
}
