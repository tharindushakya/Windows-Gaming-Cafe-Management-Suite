@page "/inventory"
@using GamingCafe.Core.Models
@using GamingCafe.Data
@inject GamingCafeContext DbContext
@inject IJSRuntime JSRuntime

<PageTitle>Inventory Management</PageTitle>

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h3 mb-0 text-gray-800">Inventory Management</h1>
        <button class="btn btn-primary" @onclick="ShowAddProductModal">
            <i class="fas fa-plus"></i> Add Product
        </button>
    </div>

    <!-- Stats Cards -->
    <div class="row mb-4">
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-primary shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
                                Total Products</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">@(products?.Count ?? 0)</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-boxes fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-success shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-success text-uppercase mb-1">
                                In Stock</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">@(products?.Count(p => p.StockQuantity > p.MinStockLevel) ?? 0)</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-check-circle fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-warning shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">
                                Low Stock</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">@(products?.Count(p => p.StockQuantity <= p.MinStockLevel && p.StockQuantity > 0) ?? 0)</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-exclamation-triangle fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-danger shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-danger text-uppercase mb-1">
                                Out of Stock</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">@(products?.Count(p => p.StockQuantity == 0) ?? 0)</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-times-circle fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Categories Filter -->
    <div class="row mb-3">
        <div class="col-md-4">
            <select class="form-control" @onchange="FilterByCategory">
                <option value="">All Categories</option>
                <option value="Beverages">Beverages</option>
                <option value="Food">Food</option>
                <option value="Accessories">Accessories</option>
                <option value="Merchandise">Merchandise</option>
            </select>
        </div>
    </div>

    <!-- Products Table -->
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">Product Inventory</h6>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-bordered" width="100%" cellspacing="0">
                    <thead>
                        <tr>
                            <th>SKU</th>
                            <th>Name</th>
                            <th>Category</th>
                            <th>Price</th>
                            <th>Cost</th>
                            <th>Stock</th>
                            <th>Min Level</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (filteredProducts == null)
                        {
                            <tr>
                                <td colspan="9" class="text-center">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="sr-only">Loading...</span>
                                    </div>
                                </td>
                            </tr>
                        }
                        else
                        {
                            @foreach (var product in filteredProducts)
                            {
                                <tr class="@GetRowClass(product)">
                                    <td>@product.SKU</td>
                                    <td>@product.Name</td>
                                    <td>
                                        <span class="badge badge-info">@product.Category</span>
                                    </td>
                                    <td>$@product.Price.ToString("F2")</td>
                                    <td>$@product.Cost.ToString("F2")</td>
                                    <td>
                                        <span class="badge badge-@(GetStockBadgeClass(product))">
                                            @product.StockQuantity
                                        </span>
                                    </td>
                                    <td>@product.MinStockLevel</td>
                                    <td>
                                        <span class="badge badge-@(product.IsActive ? "success" : "danger")">
                                            @(product.IsActive ? "Active" : "Inactive")
                                        </span>
                                    </td>
                                    <td>
                                        <button class="btn btn-sm btn-primary me-1" @onclick="() => EditProduct(product)">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="btn btn-sm btn-success me-1" @onclick="() => AdjustStock(product)">
                                            <i class="fas fa-plus-minus"></i> Stock
                                        </button>
                                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteProduct(product.ProductId)">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Product>? products;
    private List<Product>? filteredProducts;
    private string selectedCategory = "";

    protected override void OnInitialized()
    {
        LoadProducts();
    }

    private void LoadProducts()
    {
        products = DbContext.Products.OrderBy(p => p.Name).ToList();
        FilterProducts();
    }

    private void FilterProducts()
    {
        if (products == null) return;

        filteredProducts = string.IsNullOrEmpty(selectedCategory) 
            ? products 
            : products.Where(p => p.Category == selectedCategory).ToList();
    }

    private void FilterByCategory(ChangeEventArgs e)
    {
        selectedCategory = e.Value?.ToString() ?? "";
        FilterProducts();
    }

    private string GetRowClass(Product product)
    {
        if (product.StockQuantity == 0) return "table-danger";
        if (product.StockQuantity <= product.MinStockLevel) return "table-warning";
        return "";
    }

    private string GetStockBadgeClass(Product product)
    {
        if (product.StockQuantity == 0) return "danger";
        if (product.StockQuantity <= product.MinStockLevel) return "warning";
        return "success";
    }

    private async Task ShowAddProductModal()
    {
        await JSRuntime.InvokeVoidAsync("alert", "Add Product functionality coming soon!");
    }

    private async Task EditProduct(Product product)
    {
        await JSRuntime.InvokeVoidAsync("alert", $"Edit Product {product.Name} functionality coming soon!");
    }

    private async Task AdjustStock(Product product)
    {
        var adjustment = await JSRuntime.InvokeAsync<string>("prompt", $"Current stock for {product.Name}: {product.StockQuantity}\nEnter adjustment (+/-number):");
        
        if (!string.IsNullOrEmpty(adjustment) && int.TryParse(adjustment, out int adjustmentValue))
        {
            var newStock = product.StockQuantity + adjustmentValue;
            if (newStock >= 0)
            {
                product.StockQuantity = newStock;
                await DbContext.SaveChangesAsync();
                LoadProducts();
                StateHasChanged();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Stock cannot be negative!");
            }
        }
    }

    private async Task DeleteProduct(int productId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this product?");
        if (confirmed)
        {
            var product = DbContext.Products.Find(productId);
            if (product != null)
            {
                DbContext.Products.Remove(product);
                await DbContext.SaveChangesAsync();
                LoadProducts();
                StateHasChanged();
            }
        }
    }
}
