@page "/users"
@using GamingCafe.Core.DTOs
@using GamingCafe.Admin.Services
@inject AdminApiService ApiService
@inject AdminNotificationService NotificationService
@attribute [Authorize]

<PageTitle>Users - Gaming Caf√© Admin</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="h3">Users Management</h1>
                <button class="btn btn-primary" @onclick="ShowCreateUserModal">
                    <i class="bi bi-plus-lg"></i> Add User
                </button>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (users != null && users.Any())
    {
        <div class="card shadow">
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Username</th>
                                <th>Email</th>
                                <th>Name</th>
                                <th>Role</th>
                                <th>Status</th>
                                <th>Wallet Balance</th>
                                <th>Created</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var user in users)
                            {
                                <tr>
                                    <td>@user.UserId</td>
                                    <td>@user.Username</td>
                                    <td>@user.Email</td>
                                    <td>@($"{user.FirstName} {user.LastName}".Trim())</td>
                                    <td>
                                        <span class="badge bg-@(GetRoleBadgeColor(user.Role))">
                                            @user.Role
                                        </span>
                                    </td>
                                    <td>
                                        <span class="badge bg-@(user.IsActive ? "success" : "danger")">
                                            @(user.IsActive ? "Active" : "Inactive")
                                        </span>
                                    </td>
                                    <td>@user.WalletBalance.ToString("C")</td>
                                    <td>@user.CreatedAt.ToString("MMM dd, yyyy")</td>
                                    <td>
                                        <div class="btn-group btn-group-sm">
                                            <button class="btn btn-outline-primary" @onclick="() => EditUser(user)">
                                                <i class="bi bi-pencil"></i>
                                            </button>
                                            <button class="btn btn-outline-info" @onclick="() => ViewUser(user)">
                                                <i class="bi bi-eye"></i>
                                            </button>
                                            @if (user.IsActive)
                                            {
                                                <button class="btn btn-outline-warning" @onclick="() => ToggleUserStatus(user)">
                                                    <i class="bi bi-pause"></i>
                                                </button>
                                            }
                                            else
                                            {
                                                <button class="btn btn-outline-success" @onclick="() => ToggleUserStatus(user)">
                                                    <i class="bi bi-play"></i>
                                                </button>
                                            }
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="card shadow">
            <div class="card-body text-center">
                <i class="bi bi-people display-1 text-muted"></i>
                <h4 class="mt-3">No Users Found</h4>
                <p class="text-muted">Get started by adding your first user.</p>
                <button class="btn btn-primary" @onclick="ShowCreateUserModal">
                    <i class="bi bi-plus-lg"></i> Add User
                </button>
            </div>
        </div>
    }
</div>

<!-- Create User Modal -->
@if (showCreateModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Create New User</h5>
                    <button type="button" class="btn-close" @onclick="CloseCreateModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@createUserRequest" OnValidSubmit="@CreateUser">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger mb-3" />

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Username</label>
                                <InputText @bind-Value="createUserRequest.Username" class="form-control" />
                                <ValidationMessage For="@(() => createUserRequest.Username)" class="text-danger" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Email</label>
                                <InputText @bind-Value="createUserRequest.Email" type="email" class="form-control" />
                                <ValidationMessage For="@(() => createUserRequest.Email)" class="text-danger" />
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">First Name</label>
                                <InputText @bind-Value="createUserRequest.FirstName" class="form-control" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Last Name</label>
                                <InputText @bind-Value="createUserRequest.LastName" class="form-control" />
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Password</label>
                                <InputText @bind-Value="createUserRequest.Password" type="password" class="form-control" />
                                <ValidationMessage For="@(() => createUserRequest.Password)" class="text-danger" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Role</label>
                                <InputSelect @bind-Value="createUserRequest.Role" class="form-control">
                                    <option value="Customer">Customer</option>
                                    <option value="Staff">Staff</option>
                                    <option value="Manager">Manager</option>
                                    <option value="Admin">Admin</option>
                                </InputSelect>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Phone Number</label>
                                <InputText @bind-Value="createUserRequest.PhoneNumber" class="form-control" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Initial Wallet Balance</label>
                                <InputNumber @bind-Value="createUserRequest.InitialWalletBalance" class="form-control" />
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Date of Birth</label>
                            <InputDate @bind-Value="createUserRequest.DateOfBirth" class="form-control" />
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseCreateModal">Cancel</button>
                            <button type="submit" class="btn btn-primary" disabled="@isCreating">
                                @if (isCreating)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                }
                                Create User
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<UserDto>? users;
    private bool isLoading = true;
    private bool showCreateModal = false;
    private bool isCreating = false;
    private CreateUserRequest createUserRequest = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        try
    {
            isLoading = true;
            users = await ApiService.GetUsersAsync();
            
            if (users == null)
            {
                NotificationService.AddError("Failed to load users.");
            }
        }
        catch (Exception ex)
        {
            NotificationService.AddError($"Error loading users: {ex.Message}");
            Console.WriteLine($"Users error: {ex}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ShowCreateUserModal()
    {
        createUserRequest = new CreateUserRequest();
        showCreateModal = true;
    }

    private void CloseCreateModal()
    {
        showCreateModal = false;
        createUserRequest = new CreateUserRequest();
    }

    private async Task CreateUser()
    {
        try
        {
            isCreating = true;
            var result = await ApiService.CreateUserAsync(createUserRequest);
            
            if (result != null)
            {
                NotificationService.AddSuccess("User created successfully!");
                CloseCreateModal();
                await LoadUsers();
            }
            else
            {
                NotificationService.AddError("Failed to create user.");
            }
        }
        catch (Exception ex)
        {
            NotificationService.AddError($"Error creating user: {ex.Message}");
        }
        finally
        {
            isCreating = false;
        }
    }

    private void EditUser(UserDto user)
    {
        // TODO: Implement edit functionality
        NotificationService.AddInfo("Edit functionality coming soon!");
    }

    private void ViewUser(UserDto user)
    {
        // TODO: Implement view functionality
        NotificationService.AddInfo("View functionality coming soon!");
    }

    private async Task ToggleUserStatus(UserDto user)
    {
        try
        {
            var updateRequest = new UpdateUserRequest
            {
                IsActive = !user.IsActive
            };

            var success = await ApiService.UpdateUserAsync(user.UserId, updateRequest);
            
            if (success)
            {
                NotificationService.AddSuccess($"User {(user.IsActive ? "deactivated" : "activated")} successfully!");
                await LoadUsers();
            }
            else
            {
                NotificationService.AddError("Failed to update user status.");
            }
        }
        catch (Exception ex)
        {
            NotificationService.AddError($"Error updating user: {ex.Message}");
        }
    }

    private string GetRoleBadgeColor(UserRole role)
    {
        return role switch
        {
            UserRole.Admin => "danger",
            UserRole.Manager => "warning",
            UserRole.Staff => "info",
            UserRole.Customer => "primary",
            _ => "secondary"
        };
    }
}
