@page "/users"
@using GamingCafe.Core.Models
@using GamingCafe.Data
@inject GamingCafeContext DbContext
@inject IJSRuntime JSRuntime

<PageTitle>Users Management</PageTitle>

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h3 mb-0 text-gray-800">Users Management</h1>
        <button class="btn btn-primary" @onclick="ShowAddUserModal">
            <i class="fas fa-plus"></i> Add User
        </button>
    </div>

    <!-- Stats Cards -->
    <div class="row mb-4">
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-primary shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
                                Total Users</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">@(users?.Count ?? 0)</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-users fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-success shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-success text-uppercase mb-1">
                                Active Users</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">@(users?.Count(u => u.IsActive) ?? 0)</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-user-check fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-info shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-info text-uppercase mb-1">Customer Users</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">@(users?.Count(u => u.Role == UserRole.Customer) ?? 0)</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-user fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-warning shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">Admin Users</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">@(users?.Count(u => u.Role == UserRole.Admin) ?? 0)</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-user-shield fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Users Table -->
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">All Users</h6>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-bordered" width="100%" cellspacing="0">
                    <thead>
                        <tr>
                            <th>Username</th>
                            <th>Name</th>
                            <th>Email</th>
                            <th>Role</th>
                            <th>Status</th>
                            <th>Wallet Balance</th>
                            <th>Loyalty Points</th>
                            <th>Last Login</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (users == null)
                        {
                            <tr>
                                <td colspan="9" class="text-center">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="sr-only">Loading...</span>
                                    </div>
                                </td>
                            </tr>
                        }
                        else
                        {
                            @foreach (var user in users)
                            {
                                <tr>
                                    <td>@user.Username</td>
                                    <td>@user.FirstName @user.LastName</td>
                                    <td>@user.Email</td>
                                    <td>
                                        <span class="badge badge-@(GetRoleBadgeClass(user.Role))">
                                            @user.Role
                                        </span>
                                    </td>
                                    <td>
                                        <span class="badge badge-@(user.IsActive ? "success" : "danger")">
                                            @(user.IsActive ? "Active" : "Inactive")
                                        </span>
                                    </td>
                                    <td>$@user.WalletBalance.ToString("F2")</td>
                                    <td>@user.LoyaltyPoints</td>
                                    <td>@(user.LastLoginAt?.ToString("MM/dd/yyyy HH:mm") ?? "Never")</td>
                                    <td>
                                        <button class="btn btn-sm btn-primary me-1" @onclick="() => EditUser(user)">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="btn btn-sm btn-info me-1" @onclick="() => ViewUserDetails(user)">
                                            <i class="fas fa-eye"></i>
                                        </button>
                                        @if (user.Role != UserRole.Admin)
                                        {
                                            <button class="btn btn-sm btn-danger" @onclick="() => DeleteUser(user.UserId)">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        }
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@code {
    private List<User>? users;

    protected override void OnInitialized()
    {
        LoadUsers();
    }

    private void LoadUsers()
    {
        users = DbContext.Users.OrderBy(u => u.Username).ToList();
    }

    private string GetRoleBadgeClass(UserRole role)
    {
        return role switch
        {
            UserRole.Admin => "danger",
            UserRole.Staff => "warning",
            UserRole.Customer => "info",
            _ => "secondary"
        };
    }

    private async Task ShowAddUserModal()
    {
        await JSRuntime.InvokeVoidAsync("alert", "Add User functionality coming soon!");
    }

    private async Task EditUser(User user)
    {
        await JSRuntime.InvokeVoidAsync("alert", $"Edit User {user.Username} functionality coming soon!");
    }

    private async Task ViewUserDetails(User user)
    {
        await JSRuntime.InvokeVoidAsync("alert", $"View details for {user.FirstName} {user.LastName}\nEmail: {user.Email}\nWallet: ${user.WalletBalance:F2}\nLoyalty Points: {user.LoyaltyPoints}");
    }

    private async Task DeleteUser(int userId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this user?");
        if (confirmed)
        {
            var user = DbContext.Users.Find(userId);
            if (user != null && user.Role != UserRole.Admin)
            {
                DbContext.Users.Remove(user);
                await DbContext.SaveChangesAsync();
                LoadUsers();
                StateHasChanged();
            }
        }
    }
}
