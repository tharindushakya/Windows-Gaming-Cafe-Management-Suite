@page "/login"
@using GamingCafe.Core.DTOs
@using GamingCafe.Admin.Services
@inject AdminAuthService AuthService
@inject AdminNotificationService NotificationService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Login - Gaming Café Admin</PageTitle>

<div class="container-fluid vh-100">
    <div class="row h-100 justify-content-center align-items-center">
        <div class="col-md-6 col-lg-4">
            <div class="card shadow">
                <div class="card-body p-5">
                    <div class="text-center mb-4">
                        <h1 class="h3 mb-3 fw-normal">Gaming Café Admin</h1>
                        <p class="text-muted">Sign in to your account</p>
                    </div>

                    <EditForm Model="@loginRequest" OnValidSubmit="@HandleLogin" OnInvalidSubmit="@HandleInvalidSubmit" FormName="LoginForm">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger mb-3" />

                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>
                            <InputText Value="loginRequest.Email"
                                       ValueChanged="@(v => OnValueChanged("Email", v))"
                                       ValueExpression="@(() => loginRequest.Email)"
                                       class="form-control"
                                       id="email"
                                       placeholder="Enter your email"
                                       disabled="@isLoading" />
                            <ValidationMessage For="@(() => loginRequest.Email)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <InputText Value="loginRequest.Password"
                                       ValueChanged="@(v => OnValueChanged("Password", v))"
                                       ValueExpression="@(() => loginRequest.Password)"
                                       type="password"
                                       class="form-control"
                                       id="password"
                                       placeholder="Enter your password"
                                       disabled="@isLoading" />
                            <ValidationMessage For="@(() => loginRequest.Password)" class="text-danger" />
                        </div>

                        @if (requiresTwoFactor)
                        {
                            <div class="mb-3">
                                <label for="twoFactorCode" class="form-label">Two-Factor Code</label>
                                <InputText Value="loginRequest.TwoFactorCode"
                                           ValueChanged="@(v => OnValueChanged("TwoFactorCode", v))"
                                           ValueExpression="@(() => loginRequest.TwoFactorCode)"
                                           class="form-control"
                                           id="twoFactorCode"
                                           placeholder="Enter 6-digit code"
                                           maxlength="6"
                                           disabled="@isLoading" />
                                <ValidationMessage For="@(() => loginRequest.TwoFactorCode)" class="text-danger" />
                            </div>
                        }

                    <!-- Debug: show current model values (temporary) -->
                    <div class="mt-3 text-muted small">
                        <div>Email: @loginRequest.Email</div>
                        <div>Password set: @(string.IsNullOrEmpty(loginRequest.Password) ? "no" : "yes")</div>
                    </div>

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger">
                                @errorMessage
                            </div>
                        }

                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                }
                                Sign In
                            </button>
                        </div>
                    </EditForm>

                    <div class="d-flex justify-content-between mt-3">
                        <a href="/forgot-password" class="text-muted">Forgot Password?</a>
                        <a href="/register" class="text-muted">Register</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Native DOM listener for diagnostics: logs input events to browser console -->
<script>
    (function(){
        function attach(id, name){
            const el = document.getElementById(id);
            if(!el){ console.log('Input element not found:', id); return; }
            el.addEventListener('input', function(e){
                console.log('Native input event', name, el.value);
                const dbg = document.getElementById('login-debug-' + id);
                if(dbg) dbg.textContent = el.value ? el.value : '(empty)';
            });
        }
        // attach after short delay to allow prerendered DOM
        setTimeout(function(){
            attach('email','Email');
            attach('password','Password');
            attach('twoFactorCode','TwoFactorCode');
        }, 200);
    })();
</script>

@code {
    private LoginRequest loginRequest = new();
    private bool isLoading = false;
    private bool requiresTwoFactor = false;
    private string errorMessage = string.Empty;

    protected override void OnInitialized()
    {
        // Redirect if already authenticated
        if (AuthService.IsAuthenticated())
        {
            Navigation.NavigateTo("/");
        }
    }

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = string.Empty;
        StateHasChanged();

        try
        {
            var result = await AuthService.LoginAsync(loginRequest);
            
            if (result != null)
            {
                if (result.RequiresTwoFactor)
                {
                    requiresTwoFactor = true;
                    loginRequest.TwoFactorToken = result.TwoFactorToken;
                    NotificationService.AddInfo("Please enter your two-factor authentication code.");
                }
                else
                {
                    NotificationService.AddSuccess("Login successful!");
                    Navigation.NavigateTo("/");
                }
            }
            else
            {
                errorMessage = "Invalid email or password.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred during login. Please try again.";
            Console.WriteLine($"Login error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void HandleForgotPassword()
    {
        // Navigate to Forgot Password page
        Navigation.NavigateTo("/forgot-password");
    }

    private void HandleInvalidSubmit(EditContext ctx)
    {
        // Collect validation messages and display them to help debug why the form is invalid
        var messages = ctx.GetValidationMessages();
        var combined = string.Join("; ", messages);
        errorMessage = string.IsNullOrWhiteSpace(combined) ? "Please fix the form errors." : combined;
        Console.WriteLine($"Login form invalid: {errorMessage}");
        StateHasChanged();
    }

    private void OnValueChanged(string field, object? value)
    {
        var str = value?.ToString() ?? string.Empty;
        Console.WriteLine($"Field {field} changed: '{str}'");
        switch (field)
        {
            case "Email":
                loginRequest.Email = str;
                break;
            case "Password":
                loginRequest.Password = str;
                break;
            case "TwoFactorCode":
                loginRequest.TwoFactorCode = str;
                break;
        }
    }

    private void HandleRegister()
    {
        // Navigate to Register page
        Navigation.NavigateTo("/register");
    }
}
