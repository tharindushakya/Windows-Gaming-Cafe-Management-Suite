@page "/Account/Login"
@page "/login"
@layout Components.Layout.EmptyLayout
@inject AdminAuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject ILogger<Login> Logger

<PageTitle>Admin Login - Gaming Café</PageTitle>

<div class="min-vh-100 d-flex align-items-center justify-content-center bg-light">
    <div class="card shadow-lg" style="width: 100%; max-width: 400px;">
        <div class="card-header bg-primary text-white text-center py-4">
            <h3 class="mb-0">
                <i class="bi bi-shield-lock me-2"></i>
                Admin Login
            </h3>
            <p class="mb-0 opacity-75">Gaming Café Management</p>
        </div>
        
        <div class="card-body p-4">
            <EditForm Model="loginModel" OnValidSubmit="HandleLogin" FormName="AdminLogin">
                <DataAnnotationsValidator />
                
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        <i class="bi bi-exclamation-triangle me-2"></i>
                        @errorMessage
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                }
                
                <div class="mb-3">
                    <label for="username" class="form-label">
                        <i class="bi bi-person me-1"></i>
                        Username
                    </label>
                    <InputText @bind-Value="loginModel.Username" 
                              class="form-control form-control-lg" 
                              id="username" 
                              placeholder="Enter admin username" 
                              disabled="@isLoggingIn" />
                    <ValidationMessage For="() => loginModel.Username" class="text-danger small" />
                </div>
                
                <div class="mb-4">
                    <label for="password" class="form-label">
                        <i class="bi bi-lock me-1"></i>
                        Password
                    </label>
                    <InputText @bind-Value="loginModel.Password" 
                              type="password" 
                              class="form-control form-control-lg" 
                              id="password" 
                              placeholder="Enter password" 
                              disabled="@isLoggingIn" />
                    <ValidationMessage For="() => loginModel.Password" class="text-danger small" />
                </div>
                
                <div class="d-grid mb-3">
                    <button type="submit" class="btn btn-primary btn-lg" disabled="@isLoggingIn">
                        @if (isLoggingIn)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            <span>Signing In...</span>
                        }
                        else
                        {
                            <i class="bi bi-box-arrow-in-right me-2"></i>
                            <span>Sign In</span>
                        }
                    </button>
                </div>
            </EditForm>
        </div>
        
        <div class="card-footer bg-light text-center py-3">
            <small class="text-muted">
                <i class="bi bi-info-circle me-1"></i>
                Authorized personnel only
            </small>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private bool isLoggingIn = false;
    private string? errorMessage;

    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('username').focus()");
        }
    }

    private async Task HandleLogin()
    {
        isLoggingIn = true;
        errorMessage = null;
        StateHasChanged();

        try
        {
            var result = await AuthService.LoginAsync(loginModel.Username, loginModel.Password);
            
            if (result.Success)
            {
                var returnUrl = ReturnUrl ?? "/";
                Navigation.NavigateTo(returnUrl, forceLoad: true);
            }
            else
            {
                errorMessage = result.ErrorMessage ?? "Login failed. Please check your credentials.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred during login. Please try again.";
            Logger.LogError(ex, "Unhandled exception during admin login");
        }
        finally
        {
            isLoggingIn = false;
            StateHasChanged();
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Username is required")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = string.Empty;
    }
}
