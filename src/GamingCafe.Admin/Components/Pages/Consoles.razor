@page "/consoles"
@using GamingCafe.Core.Models
@using GamingCafe.Data
@inject GamingCafeContext DbContext
@inject IJSRuntime JSRuntime

<PageTitle>Console Management</PageTitle>

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h3 mb-0 text-gray-800">Gaming Consoles</h1>
        <button class="btn btn-primary" @onclick="ShowAddConsoleModal">
            <i class="fas fa-plus"></i> Add Console
        </button>
    </div>

    <div class="row">
        @if (consoles == null)
        {
            <div class="col-12">
                <div class="text-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="sr-only">Loading...</span>
                    </div>
                </div>
            </div>
        }
        else
        {
            @foreach (var console in consoles)
            {
                <div class="col-xl-3 col-md-6 mb-4">
                    <div class="card border-left-@(console.IsAvailable ? "success" : "danger") shadow h-100 py-2">
                        <div class="card-body">
                            <div class="row no-gutters align-items-center">
                                <div class="col mr-2">
                                    <div class="text-xs font-weight-bold text-@(console.IsAvailable ? "success" : "danger") text-uppercase mb-1">
                                        @console.ConsoleName
                                    </div>
                                    <div class="h5 mb-0 font-weight-bold text-gray-800">
                                        @console.Type
                                    </div>
                                    <div class="text-xs text-gray-600">
                                        Model: @console.Model
                                    </div>
                                    <div class="text-xs text-gray-600 mt-1">
                                        @(console.IsAvailable ? "Available" : "In Use")
                                    </div>
                                    @if (console.CurrentUserId.HasValue)
                                    {
                                        <div class="text-xs text-warning mt-1">
                                            <i class="fas fa-play"></i> In Session
                                        </div>
                                    }
                                </div>
                                <div class="col-auto">
                                    <i class="@GetConsoleIcon(console.Type) fa-2x text-gray-300"></i>
                                </div>
                            </div>
                            <div class="mt-3">
                                <div class="btn-group w-100" role="group">
                                    <button class="btn btn-sm btn-outline-primary" @onclick="() => ViewConsoleDetails(console)">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                    <button class="btn btn-sm btn-outline-success" @onclick="() => EditConsole(console)">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button class="btn btn-sm btn-outline-warning" @onclick="() => ManageConsoleGames(console)">
                                        <i class="fas fa-gamepad"></i>
                                    </button>
                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteConsole(console.ConsoleId)">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>

    <!-- Console Statistics -->
    <div class="row mt-4">
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-primary shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
                                Total Consoles
                            </div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">@(consoles?.Count ?? 0)</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-tv fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-success shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-success text-uppercase mb-1">
                                Active Consoles
                            </div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">@(consoles?.Count(c => c.IsAvailable) ?? 0)</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-check-circle fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-warning shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">
                                In Session
                            </div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">@(consoles?.Count(c => c.CurrentUserId.HasValue) ?? 0)</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-play fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-info shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-info text-uppercase mb-1">
                                Total Games
                            </div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">@totalGames</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-gamepad fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<GameConsole>? consoles;
    private int totalGames = 0;

    protected override void OnInitialized()
    {
        LoadConsoles();
    }

    private void LoadConsoles()
    {
        consoles = DbContext.GameConsoles.OrderBy(c => c.ConsoleName).ToList();
        totalGames = DbContext.ConsoleGames.Count();
    }

    private string GetConsoleIcon(ConsoleType consoleType)
    {
        return consoleType switch
        {
            ConsoleType.PlayStation5 => "fab fa-playstation",
            ConsoleType.PlayStation5Pro => "fab fa-playstation",
            ConsoleType.PlayStation4 => "fab fa-playstation",
            ConsoleType.PlayStation3 => "fab fa-playstation",
            ConsoleType.XboxSeriesX => "fab fa-xbox",
            ConsoleType.XboxSeriesS => "fab fa-xbox",
            ConsoleType.XboxOne => "fab fa-xbox",
            ConsoleType.XboxOneS => "fab fa-xbox",
            ConsoleType.XboxOneX => "fab fa-xbox",
            ConsoleType.Xbox360 => "fab fa-xbox",
            ConsoleType.NintendoSwitch => "fas fa-gamepad",
            ConsoleType.NintendoSwitchOLED => "fas fa-gamepad",
            ConsoleType.NintendoSwitchLite => "fas fa-gamepad",
            ConsoleType.NintendoWiiU => "fas fa-gamepad",
            ConsoleType.GamingPC => "fas fa-desktop",
            ConsoleType.SteamDeck => "fab fa-steam",
            _ => "fas fa-tv"
        };
    }

    private async Task ShowAddConsoleModal()
    {
        await JSRuntime.InvokeVoidAsync("alert", "Add Console functionality coming soon!");
    }

    private async Task EditConsole(GameConsole console)
    {
        await JSRuntime.InvokeVoidAsync("alert", $"Edit Console {console.ConsoleName} functionality coming soon!");
    }

    private async Task ViewConsoleDetails(GameConsole console)
    {
        var message = $"Console Details:\n" +
                     $"Name: {console.ConsoleName}\n" +
                     $"Type: {console.Type}\n" +
                     $"Model: {console.Model}\n" +
                     $"Status: {console.Status}\n" +
                     $"Available: {(console.IsAvailable ? "Yes" : "No")}\n" +
                     $"Session: {(console.CurrentUserId.HasValue ? "In Progress" : "None")}";
        
        await JSRuntime.InvokeVoidAsync("alert", message);
    }

    private async Task ManageConsoleGames(GameConsole console)
    {
        await JSRuntime.InvokeVoidAsync("alert", $"Manage games for {console.ConsoleName} coming soon!");
    }

    private async Task DeleteConsole(int consoleId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this console?");
        if (confirmed)
        {
            var console = DbContext.GameConsoles.Find(consoleId);
            if (console != null)
            {
                DbContext.GameConsoles.Remove(console);
                await DbContext.SaveChangesAsync();
                LoadConsoles();
                StateHasChanged();
            }
        }
    }
}
