@page "/dashboard"
@using GamingCafe.Data
@using GamingCafe.Core.Models
@using Microsoft.EntityFrameworkCore
@inject GamingCafeContext DbContext
@rendermode InteractiveServer

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1 class="display-4 text-primary mb-4">Gaming Caf√© Dashboard</h1>
        </div>
    </div>

    <!-- Stats Overview -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card bg-primary text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h4 class="card-title">@totalStations</h4>
                            <p class="card-text">Total Stations</p>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-desktop fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-success text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h4 class="card-title">@availableStations</h4>
                            <p class="card-text">Available</p>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-check-circle fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-warning text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h4 class="card-title">@occupiedStations</h4>
                            <p class="card-text">In Use</p>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-user fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-info text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h4 class="card-title">$@todayRevenue.ToString("F2")</h4>
                            <p class="card-text">Today's Revenue</p>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-dollar-sign fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Live Stations Status -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header bg-dark text-white">
                    <h5 class="mb-0"><i class="fas fa-desktop me-2"></i>Live Station Status</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        @if (stations != null)
                        {
                            @foreach (var station in stations)
                            {
                                <div class="col-md-6 col-lg-4 mb-3">
                                    <div class="card @(GetStationCardClass(station))">
                                        <div class="card-body">
                                            <h6 class="card-title">@station.StationName</h6>
                                            <p class="card-text">
                                                <strong>Type:</strong> @station.StationType<br>
                                                <strong>Rate:</strong> $@station.HourlyRate/hr<br>
                                                <strong>Status:</strong> @(station.IsAvailable ? "Available" : "In Use")
                                                @if (station.CurrentUser != null)
                                                {
                                                    <br><strong>User:</strong> @station.CurrentUser.Username
                                                    <br><strong>Started:</strong> @station.SessionStartTime?.ToString("HH:mm")
                                                }
                                            </p>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Recent Sessions -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header bg-dark text-white">
                    <h5 class="mb-0"><i class="fas fa-clock me-2"></i>Recent Sessions</h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Station</th>
                                    <th>User</th>
                                    <th>Start Time</th>
                                    <th>End Time</th>
                                    <th>Duration</th>
                                    <th>Cost</th>
                                    <th>Status</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (recentSessions != null)
                                {
                                    @foreach (var session in recentSessions)
                                    {
                                        <tr>
                                            <td>@session.Station.StationName</td>
                                            <td>@session.User.Username</td>
                                            <td>@session.StartTime.ToString("dd/MM HH:mm")</td>
                                            <td>@(session.EndTime?.ToString("dd/MM HH:mm") ?? "Active")</td>
                                            <td>@(session.Duration?.ToString(@"hh\:mm") ?? CalculateCurrentDuration(session.StartTime))</td>
                                            <td>$@session.TotalCost.ToString("F2")</td>
                                            <td>
                                                <span class="badge @GetSessionStatusClass(session.Status)">
                                                    @session.Status
                                                </span>
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<GameStation>? stations;
    private List<GameSession>? recentSessions;
    private int totalStations;
    private int availableStations;
    private int occupiedStations;
    private decimal todayRevenue;

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardData();
    }

    private async Task LoadDashboardData()
    {
        // Load stations with current users
        stations = await DbContext.GameStations
            .Include(s => s.CurrentUser)
            .Where(s => s.IsActive)
            .ToListAsync();

        // Load recent sessions
        recentSessions = await DbContext.GameSessions
            .Include(s => s.Station)
            .Include(s => s.User)
            .OrderByDescending(s => s.StartTime)
            .Take(10)
            .ToListAsync();

        // Calculate stats
        totalStations = stations.Count;
        availableStations = stations.Count(s => s.IsAvailable);
        occupiedStations = stations.Count(s => !s.IsAvailable);

        // Calculate today's revenue
        var today = DateTime.Today;
        todayRevenue = await DbContext.GameSessions
            .Where(s => s.StartTime.Date == today && s.Status == SessionStatus.Completed)
            .SumAsync(s => s.TotalCost);

        StateHasChanged();
    }

    private string GetStationCardClass(GameStation station)
    {
        return station.IsAvailable ? "border-success" : "border-warning";
    }

    private string GetSessionStatusClass(SessionStatus status)
    {
        return status switch
        {
            SessionStatus.Active => "bg-warning",
            SessionStatus.Completed => "bg-success",
            SessionStatus.Cancelled => "bg-danger",
            SessionStatus.Paused => "bg-secondary",
            _ => "bg-light"
        };
    }

    private string CalculateCurrentDuration(DateTime startTime)
    {
        var duration = DateTime.Now - startTime;
        return duration.ToString(@"hh\:mm");
    }
}
