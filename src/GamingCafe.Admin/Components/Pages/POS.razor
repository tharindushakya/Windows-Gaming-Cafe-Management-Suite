@page "/pos"
@using GamingCafe.Core.Models
@using GamingCafe.Admin.Services
@inject IPOSService POSService
@inject IStationService StationService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>POS Management</PageTitle>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col">
            <h1 class="h2 mb-0">
                <i class="fas fa-cash-register me-2 text-primary"></i>
                Point of Sale Management
            </h1>
            <p class="text-muted">Monitor transactions and manage POS system</p>
        </div>
        <div class="col-auto">
            <button class="btn btn-primary" @onclick="LaunchPOSApp">
                <i class="fas fa-external-link-alt me-2"></i>
                Launch POS Desktop App
            </button>
        </div>
    </div>

    <!-- Stats Cards -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card border-0 shadow-sm">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="me-3">
                            <i class="fas fa-dollar-sign fa-2x text-success"></i>
                        </div>
                        <div>
                            <h5 class="card-title mb-0">$@posStats.TodayRevenue.ToString("F2")</h5>
                            <p class="card-text text-muted small">Today's Revenue</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-0 shadow-sm">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="me-3">
                            <i class="fas fa-receipt fa-2x text-info"></i>
                        </div>
                        <div>
                            <h5 class="card-title mb-0">@posStats.TodayTransactions</h5>
                            <p class="card-text text-muted small">Today's Transactions</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-0 shadow-sm">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="me-3">
                            <i class="fas fa-chart-line fa-2x text-warning"></i>
                        </div>
                        <div>
                            <h5 class="card-title mb-0">$@posStats.AverageTransactionValue.ToString("F2")</h5>
                            <p class="card-text text-muted small">Avg Transaction</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-0 shadow-sm">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="me-3">
                            <i class="fas fa-shopping-cart fa-2x text-danger"></i>
                        </div>
                        <div>
                            <h5 class="card-title mb-0">@posStats.TotalProducts</h5>
                            <p class="card-text text-muted small">Available Products</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Management Tabs -->
    <div class="row">
        <div class="col-12">
            <div class="card border-0 shadow-sm">
                <div class="card-header bg-white border-bottom">
                    <ul class="nav nav-tabs card-header-tabs" role="tablist">
                        <li class="nav-item">
                            <a class="nav-link @(activeTab == "transactions" ? "active" : "")" 
                               @onclick='() => SetActiveTab("transactions")' href="#" role="tab">
                                <i class="fas fa-receipt me-1"></i> Transactions
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link @(activeTab == "products" ? "active" : "")" 
                               @onclick='() => SetActiveTab("products")' href="#" role="tab">
                                <i class="fas fa-shopping-cart me-1"></i> Products
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link @(activeTab == "stations" ? "active" : "")" 
                               @onclick='() => SetActiveTab("stations")' href="#" role="tab">
                                <i class="fas fa-desktop me-1"></i> Stations
                            </a>
                        </li>
                    </ul>
                </div>
                <div class="card-body">
                    @if (activeTab == "transactions")
                    {
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h5 class="mb-0">Recent Transactions</h5>
                            <div class="d-flex gap-2">
                                <input type="date" class="form-control form-control-sm" style="width: auto;" 
                                       @bind="selectedDate" @bind:event="onchange" />
                                <button class="btn btn-outline-primary btn-sm" @onclick="LoadTransactions">
                                    <i class="fas fa-sync-alt me-1"></i> Refresh
                                </button>
                                <button class="btn btn-outline-success btn-sm" @onclick="ExportTransactions">
                                    <i class="fas fa-file-export me-1"></i> Export
                                </button>
                            </div>
                        </div>
                        
                        @if (isLoading)
                        {
                            <div class="text-center py-4">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            </div>
                        }
                        else if (!transactions.Any())
                        {
                            <div class="text-center py-5">
                                <i class="fas fa-receipt fa-3x text-muted mb-3"></i>
                                <p class="text-muted">No transactions found for selected date</p>
                            </div>
                        }
                        else
                        {
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead class="table-light">
                                        <tr>
                                            <th>ID</th>
                                            <th>Date & Time</th>
                                            <th>User</th>
                                            <th>Type</th>
                                            <th>Amount</th>
                                            <th>Payment Method</th>
                                            <th>Description</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var transaction in transactions.Take(20))
                                        {
                                            <tr>
                                                <td><code>#@transaction.TransactionId</code></td>
                                                <td>@transaction.CreatedAt.ToString("MMM dd, yyyy HH:mm")</td>
                                                <td>
                                                    @if (transaction.User != null)
                                                    {
                                                        <span>@transaction.User.Username</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="text-muted">Guest</span>
                                                    }
                                                </td>
                                                <td>
                                                    <span class="badge bg-@GetTransactionTypeBadgeColor(transaction.Type)">
                                                        @transaction.Type
                                                    </span>
                                                </td>
                                                <td><strong>$@transaction.Amount.ToString("F2")</strong></td>
                                                <td>@transaction.PaymentMethod</td>
                                                <td>@transaction.Description</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                    }
                    else if (activeTab == "products")
                    {
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h5 class="mb-0">Product Management</h5>
                            <button class="btn btn-primary" @onclick="ShowAddProductModal">
                                <i class="fas fa-plus me-1"></i> Add Product
                            </button>
                        </div>

                        @if (isLoading)
                        {
                            <div class="text-center py-4">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            </div>
                        }
                        else if (!products.Any())
                        {
                            <div class="text-center py-5">
                                <i class="fas fa-shopping-cart fa-3x text-muted mb-3"></i>
                                <p class="text-muted">No products found</p>
                                <button class="btn btn-primary" @onclick="ShowAddProductModal">
                                    <i class="fas fa-plus me-1"></i> Add First Product
                                </button>
                            </div>
                        }
                        else
                        {
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead class="table-light">
                                        <tr>
                                            <th>Name</th>
                                            <th>Price</th>
                                            <th>Stock</th>
                                            <th>Category</th>
                                            <th>Description</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var product in products)
                                        {
                                            <tr>
                                                <td><strong>@product.Name</strong></td>
                                                <td><strong>$@product.Price.ToString("F2")</strong></td>
                                                <td>
                                                    <span class="badge bg-@(product.StockQuantity > 10 ? "success" : product.StockQuantity > 0 ? "warning" : "danger")">
                                                        @product.StockQuantity
                                                    </span>
                                                </td>
                                                <td>@product.Category</td>
                                                <td>@product.Description</td>
                                                <td>
                                                    <div class="btn-group btn-group-sm">
                                                        <button class="btn btn-outline-primary" @onclick="() => EditProduct(product)">
                                                            <i class="fas fa-edit"></i>
                                                        </button>
                                                        <button class="btn btn-outline-danger" @onclick="() => DeleteProduct(product.ProductId)">
                                                            <i class="fas fa-trash"></i>
                                                        </button>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                    }
                    else if (activeTab == "stations")
                    {
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h5 class="mb-0">Station Management</h5>
                            <div class="btn-group">
                                <button class="btn btn-primary" @onclick="ShowAddStationModal">
                                    <i class="fas fa-plus me-1"></i> Add Station
                                </button>
                                <button class="btn btn-success" @onclick="ShowAddConsoleModal">
                                    <i class="fas fa-plus me-1"></i> Add Console
                                </button>
                            </div>
                        </div>

                        <!-- Station Stats -->
                        <div class="row mb-4">
                            <div class="col-md-4">
                                <div class="card border-0 bg-light">
                                    <div class="card-body text-center">
                                        <h4 class="text-primary">@stationStats.TotalStations</h4>
                                        <p class="text-muted small mb-0">Total Stations</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="card border-0 bg-light">
                                    <div class="card-body text-center">
                                        <h4 class="text-success">@stationStats.ActiveSessions</h4>
                                        <p class="text-muted small mb-0">Active Sessions</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="card border-0 bg-light">
                                    <div class="card-body text-center">
                                        <h4 class="text-info">@stationStats.AvailableStations</h4>
                                        <p class="text-muted small mb-0">Available</p>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Stations and Consoles Lists -->
                        <div class="row">
                            <div class="col-md-6">
                                <h6 class="mb-3">Game Stations</h6>
                                @if (!gameStations.Any())
                                {
                                    <div class="text-center py-3">
                                        <p class="text-muted">No stations configured</p>
                                    </div>
                                }
                                else
                                {
                                    @foreach (var station in gameStations.Take(5))
                                    {
                                        <div class="card mb-2">
                                            <div class="card-body py-2">
                                                <div class="d-flex justify-content-between align-items-center">
                                                    <div>
                                                        <strong>@station.StationName</strong>
                                                        <span class="badge bg-@GetStationStatusColor(station.IsAvailable) ms-2">@(station.IsAvailable ? "Available" : "Occupied")</span>
                                                    </div>
                                                    <div class="btn-group btn-group-sm">
                                                        <button class="btn btn-outline-primary" @onclick="() => EditStation(station)">
                                                            <i class="fas fa-edit"></i>
                                                        </button>
                                                        <button class="btn btn-outline-danger" @onclick="() => DeleteStation(station.StationId)">
                                                            <i class="fas fa-trash"></i>
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                }
                            </div>
                            <div class="col-md-6">
                                <h6 class="mb-3">Game Consoles</h6>
                                @if (!gameConsoles.Any())
                                {
                                    <div class="text-center py-3">
                                        <p class="text-muted">No consoles configured</p>
                                    </div>
                                }
                                else
                                {
                                    @foreach (var console in gameConsoles.Take(5))
                                    {
                                        <div class="card mb-2">
                                            <div class="card-body py-2">
                                                <div class="d-flex justify-content-between align-items-center">
                                                    <div>
                                                        <strong>@console.ConsoleName</strong>
                                                        <small class="text-muted">(@console.Model)</small>
                                                        <span class="badge bg-@GetConsoleStatusColor(console.Status) ms-2">@console.Status</span>
                                                    </div>
                                                    <div class="btn-group btn-group-sm">
                                                        <button class="btn btn-outline-primary" @onclick="() => EditConsole(console)">
                                                            <i class="fas fa-edit"></i>
                                                        </button>
                                                        <button class="btn btn-outline-danger" @onclick="() => DeleteConsole(console.ConsoleId)">
                                                            <i class="fas fa-trash"></i>
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private POSStats posStats = new();
    private StationStats stationStats = new();
    private List<Transaction> transactions = new();
    private List<Product> products = new();
    private List<GameStation> gameStations = new();
    private List<GameConsole> gameConsoles = new();
    
    private string activeTab = "transactions";
    private DateTime selectedDate = DateTime.Today;
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadAllData();
    }

    private async Task LoadAllData()
    {
        isLoading = true;
        try
        {
            await Task.WhenAll(
                LoadPOSStats(),
                LoadTransactions(),
                LoadProducts(),
                LoadStations(),
                LoadStationStats()
            );
        }
        catch (Exception ex)
        {
            // Handle error - in production, use proper logging
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadPOSStats()
    {
        posStats = await POSService.GetPOSStatsAsync(selectedDate);
    }

    private async Task LoadTransactions()
    {
        transactions = await POSService.GetTransactionsAsync(selectedDate);
        await LoadPOSStats(); // Refresh stats when transactions change
        StateHasChanged();
    }

    private async Task LoadProducts()
    {
        products = await POSService.GetProductsAsync();
    }

    private async Task LoadStations()
    {
        gameStations = await StationService.GetGameStationsAsync();
        gameConsoles = await StationService.GetGameConsolesAsync();
    }

    private async Task LoadStationStats()
    {
        stationStats = await StationService.GetStationStatsAsync();
    }

    private void SetActiveTab(string tab)
    {
        activeTab = tab;
        StateHasChanged();
    }

    private async Task LaunchPOSApp()
    {
        await JSRuntime.InvokeVoidAsync("alert", 
            "To launch the POS Desktop Application, run this command in a terminal:\n\n" +
            "dotnet run --project src/GamingCafe.POS\n\n" +
            "The POS app will open in a new window with all the new features:\n" +
            "• Settings Management\n" +
            "• Daily Reports\n" +
            "• Station Control\n" +
            "• Fixed Payment Modals");
    }

    private async Task ExportTransactions()
    {
        try
        {
            var exportData = await POSService.ExportTransactionsAsync(selectedDate, selectedDate);
            await JSRuntime.InvokeVoidAsync("alert", 
                $"Export ready: {exportData.Count} transactions for {selectedDate:yyyy-MM-dd}\n\n" +
                "In a full implementation, this would download a CSV file.");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Export failed: {ex.Message}");
        }
    }

    // Product Management
    private async Task ShowAddProductModal()
    {
        var productName = await JSRuntime.InvokeAsync<string>("prompt", "Enter product name:");
        if (string.IsNullOrEmpty(productName)) return;

        var priceStr = await JSRuntime.InvokeAsync<string>("prompt", "Enter price:");
        if (!decimal.TryParse(priceStr, out var price)) return;

        var stockStr = await JSRuntime.InvokeAsync<string>("prompt", "Enter stock quantity:");
        if (!int.TryParse(stockStr, out var stock)) return;

        var category = await JSRuntime.InvokeAsync<string>("prompt", "Enter category:");
        var description = await JSRuntime.InvokeAsync<string>("prompt", "Enter description:");

        try
        {
            var product = new Product
            {
                Name = productName,
                Price = price,
                StockQuantity = stock,
                Category = category ?? "General",
                Description = description ?? "",
                CreatedAt = DateTime.UtcNow
            };

            await POSService.CreateProductAsync(product);
            await LoadProducts();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Failed to add product: {ex.Message}");
        }
    }

    private async Task EditProduct(Product product)
    {
        await JSRuntime.InvokeVoidAsync("alert", 
            $"Edit Product: {product.Name}\n\n" +
            "In a full implementation, this would open an edit modal with form fields.");
    }

    private async Task DeleteProduct(int productId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this product?");
        if (!confirmed) return;

        try
        {
            await POSService.DeleteProductAsync(productId);
            await LoadProducts();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Failed to delete product: {ex.Message}");
        }
    }

    // Station Management
    private async Task ShowAddStationModal()
    {
        var stationName = await JSRuntime.InvokeAsync<string>("prompt", "Enter station name:");
        if (string.IsNullOrEmpty(stationName)) return;

        try
        {
            var station = new GameStation
            {
                StationName = stationName,
                IsAvailable = true,
                CreatedAt = DateTime.UtcNow
            };

            await StationService.CreateGameStationAsync(station);
            await LoadStations();
            await LoadStationStats();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Failed to add station: {ex.Message}");
        }
    }

    private async Task ShowAddConsoleModal()
    {
        var consoleName = await JSRuntime.InvokeAsync<string>("prompt", "Enter console name:");
        if (string.IsNullOrEmpty(consoleName)) return;

        var model = await JSRuntime.InvokeAsync<string>("prompt", "Enter console model (e.g., PS5, Xbox Series X):");
        if (string.IsNullOrEmpty(model)) return;

        try
        {
            var console = new GameConsole
            {
                ConsoleName = consoleName,
                Model = model,
                Status = ConsoleStatus.Online,
                CreatedAt = DateTime.UtcNow
            };

            await StationService.CreateGameConsoleAsync(console);
            await LoadStations();
            await LoadStationStats();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Failed to add console: {ex.Message}");
        }
    }

    private async Task EditStation(GameStation station)
    {
        await JSRuntime.InvokeVoidAsync("alert", 
            $"Edit Station: {station.StationName}\n\n" +
            "In a full implementation, this would open an edit modal.");
    }

    private async Task EditConsole(GameConsole console)
    {
        await JSRuntime.InvokeVoidAsync("alert", 
            $"Edit Console: {console.ConsoleName}\n\n" +
            "In a full implementation, this would open an edit modal.");
    }

    private async Task DeleteStation(int stationId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this station?");
        if (!confirmed) return;

        try
        {
            await StationService.DeleteGameStationAsync(stationId);
            await LoadStations();
            await LoadStationStats();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Failed to delete station: {ex.Message}");
        }
    }

    private async Task DeleteConsole(int consoleId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this console?");
        if (!confirmed) return;

        try
        {
            await StationService.DeleteGameConsoleAsync(consoleId);
            await LoadStations();
            await LoadStationStats();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Failed to delete console: {ex.Message}");
        }
    }

    // Helper methods for styling
    private string GetTransactionTypeBadgeColor(TransactionType type) => type switch
    {
        TransactionType.Product => "success",
        TransactionType.Refund => "danger",
        TransactionType.GameTime => "info",
        _ => "secondary"
    };

    private string GetStationStatusColor(bool isAvailable) => isAvailable ? "success" : "warning";

    private string GetConsoleStatusColor(ConsoleStatus status) => status switch
    {
        ConsoleStatus.Online => "success",
        ConsoleStatus.InUse => "warning",
        ConsoleStatus.Maintenance => "danger",
        ConsoleStatus.Updating => "info",
        _ => "secondary"
    };
}
