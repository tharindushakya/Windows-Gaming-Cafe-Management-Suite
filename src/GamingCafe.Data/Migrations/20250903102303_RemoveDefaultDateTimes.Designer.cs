// <auto-generated />
using System;
using GamingCafe.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GamingCafe.Data.Migrations
{
    [DbContext(typeof(GamingCafeContext))]
    [Migration("20250903102303_RemoveDefaultDateTimes")]
    partial class RemoveDefaultDateTimes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GamingCafe.Core.Models.ConsoleGame", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GameId"));

                    b.Property<int>("ConsoleId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Developer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("DownloadProgress")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("GameImageUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("GameTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("InstallDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDownloading")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInstalled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastPlayed")
                        .HasColumnType("datetime2");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Rating")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("SizeGB")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("GameId");

                    b.HasIndex("ConsoleId");

                    b.ToTable("ConsoleGames");

                    b.HasData(
                        new
                        {
                            GameId = 1,
                            ConsoleId = 1,
                            Description = "Swing through NYC as Spider-Man in this thrilling adventure",
                            Developer = "Insomniac Games",
                            DownloadProgress = 100.0m,
                            GameImageUrl = "",
                            GameTitle = "Spider-Man 2",
                            Genre = "Action/Adventure",
                            InstallDate = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDownloading = false,
                            IsInstalled = true,
                            Publisher = "Sony Interactive Entertainment",
                            Rating = "T",
                            SizeGB = 98.5m
                        },
                        new
                        {
                            GameId = 2,
                            ConsoleId = 1,
                            Description = "Epic conclusion to the Norse saga of Kratos and Atreus",
                            Developer = "Santa Monica Studio",
                            DownloadProgress = 100.0m,
                            GameImageUrl = "",
                            GameTitle = "God of War Ragnarök",
                            Genre = "Action/Adventure",
                            InstallDate = new DateTime(2024, 12, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDownloading = false,
                            IsInstalled = true,
                            Publisher = "Sony Interactive Entertainment",
                            Rating = "M",
                            SizeGB = 90.6m
                        },
                        new
                        {
                            GameId = 3,
                            ConsoleId = 2,
                            Description = "Master Chief returns in this sci-fi shooter",
                            Developer = "343 Industries",
                            DownloadProgress = 100.0m,
                            GameImageUrl = "",
                            GameTitle = "Halo Infinite",
                            Genre = "FPS",
                            InstallDate = new DateTime(2024, 12, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDownloading = false,
                            IsInstalled = true,
                            Publisher = "Microsoft Studios",
                            Rating = "T",
                            SizeGB = 48.4m
                        },
                        new
                        {
                            GameId = 4,
                            ConsoleId = 2,
                            Description = "Open-world racing across beautiful Mexico",
                            Developer = "Playground Games",
                            DownloadProgress = 100.0m,
                            GameImageUrl = "",
                            GameTitle = "Forza Horizon 5",
                            Genre = "Racing",
                            InstallDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDownloading = false,
                            IsInstalled = true,
                            Publisher = "Microsoft Studios",
                            Rating = "E",
                            SizeGB = 103.0m
                        },
                        new
                        {
                            GameId = 5,
                            ConsoleId = 3,
                            Description = "Epic adventure in the skies and depths of Hyrule",
                            Developer = "Nintendo EPD",
                            DownloadProgress = 100.0m,
                            GameImageUrl = "",
                            GameTitle = "The Legend of Zelda: Tears of the Kingdom",
                            Genre = "Action/Adventure",
                            InstallDate = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDownloading = false,
                            IsInstalled = true,
                            Publisher = "Nintendo",
                            Rating = "E10+",
                            SizeGB = 18.2m
                        },
                        new
                        {
                            GameId = 6,
                            ConsoleId = 3,
                            Description = "Join Mario on a 3D platforming adventure across kingdoms",
                            Developer = "Nintendo EPD",
                            DownloadProgress = 100.0m,
                            GameImageUrl = "",
                            GameTitle = "Super Mario Odyssey",
                            Genre = "Platformer",
                            InstallDate = new DateTime(2024, 11, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDownloading = false,
                            IsInstalled = true,
                            Publisher = "Nintendo",
                            Rating = "E10+",
                            SizeGB = 5.7m
                        });
                });

            modelBuilder.Entity("GamingCafe.Core.Models.ConsoleRemoteCommand", b =>
                {
                    b.Property<int>("CommandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommandId"));

                    b.Property<string>("Command")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ConsoleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ExecutedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Parameters")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("CommandId");

                    b.HasIndex("ConsoleId");

                    b.ToTable("ConsoleRemoteCommands");
                });

            modelBuilder.Entity("GamingCafe.Core.Models.ConsoleSession", b =>
                {
                    b.Property<int>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SessionId"));

                    b.Property<int>("ConsoleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("GameGenre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("GameTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("HourlyRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("PlayersCount")
                        .HasColumnType("int");

                    b.Property<string>("SessionData")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SessionId");

                    b.HasIndex("ConsoleId");

                    b.HasIndex("UserId");

                    b.ToTable("ConsoleSessions");
                });

            modelBuilder.Entity("GamingCafe.Core.Models.GameConsole", b =>
                {
                    b.Property<int>("ConsoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConsoleId"));

                    b.Property<bool>("AllowGameDownloads")
                        .HasColumnType("bit");

                    b.Property<string>("ConsoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ControllerSettings")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentGame")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("CurrentUserId")
                        .HasColumnType("int");

                    b.Property<string>("DisplaySettings")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FirmwareVersion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("HourlyRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastPingAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("MacAddress")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("ParentalControlsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("SessionStartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ConsoleId");

                    b.HasIndex("ConsoleName")
                        .IsUnique();

                    b.HasIndex("CurrentUserId");

                    b.ToTable("GameConsoles");

                    b.HasData(
                        new
                        {
                            ConsoleId = 1,
                            AllowGameDownloads = true,
                            ConsoleName = "PlayStation5-01",
                            ControllerSettings = "",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrentGame = "",
                            DisplaySettings = "",
                            FirmwareVersion = "8.03",
                            HourlyRate = 8.00m,
                            IpAddress = "",
                            IsAvailable = true,
                            IsOnline = true,
                            LastPingAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MacAddress = "",
                            Model = "PS5 Standard",
                            Notes = "Main PlayStation 5 console with 4K gaming",
                            ParentalControlsEnabled = false,
                            SerialNumber = "",
                            Status = 0,
                            Type = 11
                        },
                        new
                        {
                            ConsoleId = 2,
                            AllowGameDownloads = true,
                            ConsoleName = "XboxSeriesX-01",
                            ControllerSettings = "",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrentGame = "",
                            DisplaySettings = "",
                            FirmwareVersion = "10.0.25398",
                            HourlyRate = 8.00m,
                            IpAddress = "",
                            IsAvailable = true,
                            IsOnline = true,
                            LastPingAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MacAddress = "",
                            Model = "Xbox Series X",
                            Notes = "Xbox Series X with Game Pass Ultimate",
                            ParentalControlsEnabled = false,
                            SerialNumber = "",
                            Status = 0,
                            Type = 24
                        },
                        new
                        {
                            ConsoleId = 3,
                            AllowGameDownloads = true,
                            ConsoleName = "NintendoSwitch-01",
                            ControllerSettings = "",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrentGame = "",
                            DisplaySettings = "",
                            FirmwareVersion = "16.1.0",
                            HourlyRate = 6.00m,
                            IpAddress = "",
                            IsAvailable = true,
                            IsOnline = true,
                            LastPingAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MacAddress = "",
                            Model = "Switch OLED",
                            Notes = "Nintendo Switch OLED with dock for TV play",
                            ParentalControlsEnabled = false,
                            SerialNumber = "",
                            Status = 0,
                            Type = 32
                        },
                        new
                        {
                            ConsoleId = 4,
                            AllowGameDownloads = true,
                            ConsoleName = "PlayStation4-01",
                            ControllerSettings = "",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrentGame = "",
                            DisplaySettings = "",
                            FirmwareVersion = "11.00",
                            HourlyRate = 5.00m,
                            IpAddress = "",
                            IsAvailable = true,
                            IsOnline = true,
                            LastPingAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MacAddress = "",
                            Model = "PS4 Pro",
                            Notes = "PlayStation 4 Pro for budget gaming",
                            ParentalControlsEnabled = false,
                            SerialNumber = "",
                            Status = 0,
                            Type = 10
                        },
                        new
                        {
                            ConsoleId = 5,
                            AllowGameDownloads = true,
                            ConsoleName = "SteamDeck-01",
                            ControllerSettings = "",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrentGame = "",
                            DisplaySettings = "",
                            FirmwareVersion = "3.5.7",
                            HourlyRate = 7.00m,
                            IpAddress = "",
                            IsAvailable = true,
                            IsOnline = true,
                            LastPingAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MacAddress = "",
                            Model = "Steam Deck 512GB",
                            Notes = "Portable PC gaming with Steam library",
                            ParentalControlsEnabled = false,
                            SerialNumber = "",
                            Status = 0,
                            Type = 41
                        });
                });

            modelBuilder.Entity("GamingCafe.Core.Models.GameSession", b =>
                {
                    b.Property<int>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SessionId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("HourlyRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("StationId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SessionId");

                    b.HasIndex("StationId");

                    b.HasIndex("UserId");

                    b.ToTable("GameSessions");
                });

            modelBuilder.Entity("GamingCafe.Core.Models.GameStation", b =>
                {
                    b.Property<int>("StationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StationId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CurrentUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("GraphicsCard")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("HourlyRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("MacAddress")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)");

                    b.Property<string>("Memory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Processor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("SessionStartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StationType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Storage")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("StationId");

                    b.HasIndex("CurrentUserId");

                    b.HasIndex("StationName")
                        .IsUnique();

                    b.ToTable("GameStations");

                    b.HasData(
                        new
                        {
                            StationId = 1,
                            CreatedAt = new DateTime(2025, 9, 3, 10, 23, 3, 27, DateTimeKind.Utc).AddTicks(7127),
                            Description = "High-end Gaming PC",
                            GraphicsCard = "",
                            HourlyRate = 5.00m,
                            IpAddress = "",
                            IsActive = true,
                            IsAvailable = true,
                            MacAddress = "",
                            Memory = "",
                            Processor = "",
                            StationName = "PC-01",
                            StationType = "PC",
                            Storage = ""
                        },
                        new
                        {
                            StationId = 2,
                            CreatedAt = new DateTime(2025, 9, 3, 10, 23, 3, 27, DateTimeKind.Utc).AddTicks(8307),
                            Description = "High-end Gaming PC",
                            GraphicsCard = "",
                            HourlyRate = 5.00m,
                            IpAddress = "",
                            IsActive = true,
                            IsAvailable = true,
                            MacAddress = "",
                            Memory = "",
                            Processor = "",
                            StationName = "PC-02",
                            StationType = "PC",
                            Storage = ""
                        },
                        new
                        {
                            StationId = 3,
                            CreatedAt = new DateTime(2025, 9, 3, 10, 23, 3, 27, DateTimeKind.Utc).AddTicks(8310),
                            Description = "High-end Gaming PC",
                            GraphicsCard = "",
                            HourlyRate = 5.00m,
                            IpAddress = "",
                            IsActive = true,
                            IsAvailable = true,
                            MacAddress = "",
                            Memory = "",
                            Processor = "",
                            StationName = "PC-03",
                            StationType = "PC",
                            Storage = ""
                        },
                        new
                        {
                            StationId = 4,
                            CreatedAt = new DateTime(2025, 9, 3, 10, 23, 3, 27, DateTimeKind.Utc).AddTicks(8312),
                            Description = "High-end Gaming PC",
                            GraphicsCard = "",
                            HourlyRate = 5.00m,
                            IpAddress = "",
                            IsActive = true,
                            IsAvailable = true,
                            MacAddress = "",
                            Memory = "",
                            Processor = "",
                            StationName = "PC-04",
                            StationType = "PC",
                            Storage = ""
                        },
                        new
                        {
                            StationId = 5,
                            CreatedAt = new DateTime(2025, 9, 3, 10, 23, 3, 27, DateTimeKind.Utc).AddTicks(8313),
                            Description = "High-end Gaming PC",
                            GraphicsCard = "",
                            HourlyRate = 5.00m,
                            IpAddress = "",
                            IsActive = true,
                            IsAvailable = true,
                            MacAddress = "",
                            Memory = "",
                            Processor = "",
                            StationName = "PC-05",
                            StationType = "PC",
                            Storage = ""
                        });
                });

            modelBuilder.Entity("GamingCafe.Core.Models.InventoryMovement", b =>
                {
                    b.Property<int>("MovementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MovementId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("MovementId");

                    b.HasIndex("ProductId");

                    b.ToTable("InventoryMovements");
                });

            modelBuilder.Entity("GamingCafe.Core.Models.LoyaltyProgram", b =>
                {
                    b.Property<int>("ProgramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgramId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MinPointsToRedeem")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PointsPerDollar")
                        .HasColumnType("int");

                    b.Property<decimal>("RedemptionValue")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("ProgramId");

                    b.ToTable("LoyaltyPrograms");

                    b.HasData(
                        new
                        {
                            ProgramId = 1,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Earn points for every dollar spent and redeem for gaming time or products",
                            IsActive = true,
                            MinPointsToRedeem = 100,
                            Name = "Gaming Café Rewards",
                            PointsPerDollar = 1,
                            RedemptionValue = 0.01m
                        });
                });

            modelBuilder.Entity("GamingCafe.Core.Models.LoyaltyRedemption", b =>
                {
                    b.Property<int>("RedemptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RedemptionId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("PointsUsed")
                        .HasColumnType("int");

                    b.Property<DateTime>("RedeemedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("RewardId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RedemptionId");

                    b.HasIndex("RewardId");

                    b.HasIndex("UserId");

                    b.ToTable("LoyaltyRedemptions");
                });

            modelBuilder.Entity("GamingCafe.Core.Models.LoyaltyReward", b =>
                {
                    b.Property<int>("RewardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RewardId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentRedemptions")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DiscountPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxRedemptions")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PointsRequired")
                        .HasColumnType("int");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int");

                    b.HasKey("RewardId");

                    b.HasIndex("ProgramId");

                    b.ToTable("LoyaltyRewards");
                });

            modelBuilder.Entity("GamingCafe.Core.Models.PS5Console", b =>
                {
                    b.Property<int>("ConsoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConsoleId"));

                    b.Property<string>("ConsoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentGame")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("CurrentUserId")
                        .HasColumnType("int");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastPingAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("MacAddress")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("SessionStartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ConsoleId");

                    b.HasIndex("ConsoleName")
                        .IsUnique();

                    b.HasIndex("CurrentUserId");

                    b.ToTable("PS5Consoles");

                    b.HasData(
                        new
                        {
                            ConsoleId = 1,
                            ConsoleName = "PS5-01",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrentGame = "",
                            IpAddress = "",
                            IsAvailable = true,
                            LastPingAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MacAddress = "",
                            SerialNumber = "",
                            Status = 0
                        });
                });

            modelBuilder.Entity("GamingCafe.Core.Models.PS5RemoteCommand", b =>
                {
                    b.Property<int>("CommandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommandId"));

                    b.Property<string>("Command")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ConsoleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ExecutedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Parameters")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("CommandId");

                    b.HasIndex("ConsoleId");

                    b.ToTable("PS5RemoteCommands");
                });

            modelBuilder.Entity("GamingCafe.Core.Models.PS5Session", b =>
                {
                    b.Property<int>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SessionId"));

                    b.Property<int>("ConsoleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("GameTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("HourlyRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SessionId");

                    b.HasIndex("ConsoleId");

                    b.HasIndex("UserId");

                    b.ToTable("PS5Sessions");
                });

            modelBuilder.Entity("GamingCafe.Core.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LoyaltyPointsEarned")
                        .HasColumnType("int");

                    b.Property<int>("LoyaltyPointsRequired")
                        .HasColumnType("int");

                    b.Property<int>("MinStockLevel")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ProductId");

                    b.HasIndex("SKU")
                        .IsUnique();

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            Category = "Beverages",
                            Cost = 1.50m,
                            CreatedAt = new DateTime(2025, 9, 3, 10, 23, 3, 28, DateTimeKind.Utc).AddTicks(9941),
                            Description = "",
                            ImageUrl = "",
                            IsActive = true,
                            LoyaltyPointsEarned = 0,
                            LoyaltyPointsRequired = 0,
                            MinStockLevel = 5,
                            Name = "Energy Drink",
                            Price = 3.50m,
                            SKU = "BEV001",
                            StockQuantity = 50
                        },
                        new
                        {
                            ProductId = 2,
                            Category = "Accessories",
                            Cost = 40.00m,
                            CreatedAt = new DateTime(2025, 9, 3, 10, 23, 3, 29, DateTimeKind.Utc).AddTicks(1487),
                            Description = "",
                            ImageUrl = "",
                            IsActive = true,
                            LoyaltyPointsEarned = 0,
                            LoyaltyPointsRequired = 0,
                            MinStockLevel = 5,
                            Name = "Gaming Headset",
                            Price = 79.99m,
                            SKU = "ACC001",
                            StockQuantity = 10
                        },
                        new
                        {
                            ProductId = 3,
                            Category = "Accessories",
                            Cost = 70.00m,
                            CreatedAt = new DateTime(2025, 9, 3, 10, 23, 3, 29, DateTimeKind.Utc).AddTicks(1491),
                            Description = "",
                            ImageUrl = "",
                            IsActive = true,
                            LoyaltyPointsEarned = 0,
                            LoyaltyPointsRequired = 0,
                            MinStockLevel = 5,
                            Name = "Mechanical Keyboard",
                            Price = 129.99m,
                            SKU = "ACC002",
                            StockQuantity = 5
                        },
                        new
                        {
                            ProductId = 4,
                            Category = "Food",
                            Cost = 2.50m,
                            CreatedAt = new DateTime(2025, 9, 3, 10, 23, 3, 29, DateTimeKind.Utc).AddTicks(1493),
                            Description = "",
                            ImageUrl = "",
                            IsActive = true,
                            LoyaltyPointsEarned = 0,
                            LoyaltyPointsRequired = 0,
                            MinStockLevel = 5,
                            Name = "Snack Pack",
                            Price = 5.99m,
                            SKU = "FOD001",
                            StockQuantity = 25
                        });
                });

            modelBuilder.Entity("GamingCafe.Core.Models.Reservation", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservationId"));

                    b.Property<string>("CancellationReason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("EstimatedCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("StationId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReservationId");

                    b.HasIndex("StationId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("GamingCafe.Core.Models.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<string>("PaymentReference")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("SessionId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TransactionId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SessionId");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("GamingCafe.Core.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("LoyaltyPoints")
                        .HasColumnType("int");

                    b.Property<DateTime?>("MembershipExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("WalletBalance")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@gamingcafe.local",
                            FirstName = "System",
                            IsActive = true,
                            LastName = "Administrator",
                            LoyaltyPoints = 0,
                            PasswordHash = "$2a$11$3rKvv5rUZ5g5zKq7hNjY9.nGxQZRqJXs3YTvFZdXmXPQs4BNt5DQi",
                            PhoneNumber = "",
                            Role = 3,
                            Username = "admin",
                            WalletBalance = 0m
                        });
                });

            modelBuilder.Entity("GamingCafe.Core.Models.WalletTransaction", b =>
                {
                    b.Property<int>("WalletTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WalletTransactionId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("WalletTransactionId");

                    b.HasIndex("UserId");

                    b.ToTable("WalletTransactions");
                });

            modelBuilder.Entity("GamingCafe.Core.Models.ConsoleGame", b =>
                {
                    b.HasOne("GamingCafe.Core.Models.GameConsole", "Console")
                        .WithMany("InstalledGames")
                        .HasForeignKey("ConsoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Console");
                });

            modelBuilder.Entity("GamingCafe.Core.Models.ConsoleRemoteCommand", b =>
                {
                    b.HasOne("GamingCafe.Core.Models.GameConsole", "Console")
                        .WithMany("RemoteCommands")
                        .HasForeignKey("ConsoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Console");
                });

            modelBuilder.Entity("GamingCafe.Core.Models.ConsoleSession", b =>
                {
                    b.HasOne("GamingCafe.Core.Models.GameConsole", "Console")
                        .WithMany("Sessions")
                        .HasForeignKey("ConsoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamingCafe.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Console");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GamingCafe.Core.Models.GameConsole", b =>
                {
                    b.HasOne("GamingCafe.Core.Models.User", "CurrentUser")
                        .WithMany()
                        .HasForeignKey("CurrentUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CurrentUser");
                });

            modelBuilder.Entity("GamingCafe.Core.Models.GameSession", b =>
                {
                    b.HasOne("GamingCafe.Core.Models.GameStation", "Station")
                        .WithMany("GameSessions")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamingCafe.Core.Models.User", "User")
                        .WithMany("GameSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Station");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GamingCafe.Core.Models.GameStation", b =>
                {
                    b.HasOne("GamingCafe.Core.Models.User", "CurrentUser")
                        .WithMany()
                        .HasForeignKey("CurrentUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CurrentUser");
                });

            modelBuilder.Entity("GamingCafe.Core.Models.InventoryMovement", b =>
                {
                    b.HasOne("GamingCafe.Core.Models.Product", "Product")
                        .WithMany("InventoryMovements")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GamingCafe.Core.Models.LoyaltyRedemption", b =>
                {
                    b.HasOne("GamingCafe.Core.Models.LoyaltyReward", "Reward")
                        .WithMany("Redemptions")
                        .HasForeignKey("RewardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamingCafe.Core.Models.User", "User")
                        .WithMany("LoyaltyRedemptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reward");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GamingCafe.Core.Models.LoyaltyReward", b =>
                {
                    b.HasOne("GamingCafe.Core.Models.LoyaltyProgram", "Program")
                        .WithMany("Rewards")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Program");
                });

            modelBuilder.Entity("GamingCafe.Core.Models.PS5Console", b =>
                {
                    b.HasOne("GamingCafe.Core.Models.User", "CurrentUser")
                        .WithMany()
                        .HasForeignKey("CurrentUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CurrentUser");
                });

            modelBuilder.Entity("GamingCafe.Core.Models.PS5RemoteCommand", b =>
                {
                    b.HasOne("GamingCafe.Core.Models.PS5Console", "Console")
                        .WithMany()
                        .HasForeignKey("ConsoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Console");
                });

            modelBuilder.Entity("GamingCafe.Core.Models.PS5Session", b =>
                {
                    b.HasOne("GamingCafe.Core.Models.PS5Console", "Console")
                        .WithMany("Sessions")
                        .HasForeignKey("ConsoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamingCafe.Core.Models.User", "User")
                        .WithMany("PS5Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Console");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GamingCafe.Core.Models.Reservation", b =>
                {
                    b.HasOne("GamingCafe.Core.Models.GameStation", "Station")
                        .WithMany("Reservations")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamingCafe.Core.Models.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Station");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GamingCafe.Core.Models.Transaction", b =>
                {
                    b.HasOne("GamingCafe.Core.Models.Product", "Product")
                        .WithMany("Transactions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("GamingCafe.Core.Models.GameSession", "Session")
                        .WithMany("Transactions")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("GamingCafe.Core.Models.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Session");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GamingCafe.Core.Models.WalletTransaction", b =>
                {
                    b.HasOne("GamingCafe.Core.Models.User", "User")
                        .WithMany("WalletTransactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GamingCafe.Core.Models.GameConsole", b =>
                {
                    b.Navigation("InstalledGames");

                    b.Navigation("RemoteCommands");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("GamingCafe.Core.Models.GameSession", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("GamingCafe.Core.Models.GameStation", b =>
                {
                    b.Navigation("GameSessions");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("GamingCafe.Core.Models.LoyaltyProgram", b =>
                {
                    b.Navigation("Rewards");
                });

            modelBuilder.Entity("GamingCafe.Core.Models.LoyaltyReward", b =>
                {
                    b.Navigation("Redemptions");
                });

            modelBuilder.Entity("GamingCafe.Core.Models.PS5Console", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("GamingCafe.Core.Models.Product", b =>
                {
                    b.Navigation("InventoryMovements");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("GamingCafe.Core.Models.User", b =>
                {
                    b.Navigation("GameSessions");

                    b.Navigation("LoyaltyRedemptions");

                    b.Navigation("PS5Sessions");

                    b.Navigation("Reservations");

                    b.Navigation("Transactions");

                    b.Navigation("WalletTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
